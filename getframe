#!/usr/bin/env perl
use strict;
use warnings;
use lib 'lib';
use BN;
use Cairo;
use Getopt::Std qw( getopts );

my %opts;
getopts('n:s:v', \%opts);
my $size = $opts{s} || 100;
my $num = $opts{n} || 0;

die unless @ARGV == 1;
my $name = $ARGV[0];
my $anim = BN::Animation->get($name) or die;

my $wid = $anim->bmp_width();
my $hgt = $anim->bmp_height();
my $stride = Cairo::Format::stride_for_width('argb32', $wid);
my $src = Cairo::ImageSurface->create_for_data(
   $anim->bitmap('cairo', $stride), 'argb32', $wid, $hgt, $stride);

my $surface = Cairo::ImageSurface->create('argb32', $size, $size);
my $c = Cairo::Context->create($surface);

$c->translate($size/2, $size/2);

foreach my $quad ($anim->frame($num, $size, 1, $num)) {
   print sqrt(abs($quad->{det})), "\n" if $opts{v};
   $c->save();
   $c->transform(Cairo::Matrix->init(@{$quad->{mat}}));
   $c->set_source_surface($src, 0, 0);
   $c->move_to($quad->{x0}, $quad->{y0});
   $c->line_to($quad->{x1}, $quad->{y1});
   $c->line_to($quad->{x2}, $quad->{y2});
   $c->line_to($quad->{x3}, $quad->{y3});
   $c->close_path();
   $c->fill();
   $c->restore();
}

$surface->write_to_png("$name-temp.png");
system("pngcrush -new -brute -q $name-temp.png $name.png") == 0 or die;
unlink "$name-temp.png";
system "open $name.png";

