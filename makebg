#!/usr/bin/env perl
use strict;
use warnings;
use lib 'lib';
use BN;
use Cairo;

die "usage: $0 mapname\n" unless @ARGV == 1;

my $bgfile = $ARGV[0];
my $grid_x = 100 * 1.04;
my $grid_y = 50 * 1.04;
my $scale = 0.90 / 1.04;
my $w = 2;
my $pad = 8;
my $tempfile = 'bkg_temp.png';

my $bgpath = BN::File->get($bgfile) or die "Background $bgfile not found\n";
my $bkg = Cairo::ImageSurface->create_from_png($bgpath)
   or die "Couldn't read $bgfile\n";
my $half_wid = $bkg->get_width() / 2;
my $half_hgt = $bkg->get_height() / 2;

my ($xmin, $xmax, $ymin, $ymax);
($xmin, undef) = xform(-$w-1, 1);  $xmin -= $pad;
($xmax, undef) = xform(1, 4);      $xmax += $pad;
(undef, $ymax) = xform($w, 1);     $ymax += $pad;
$xmin = -$half_wid if $xmin < -$half_wid;
$xmax = $half_wid if $xmax > $half_wid;
$ymin = -$half_hgt;
$ymax = $half_hgt if $ymax > $half_hgt;

my $wid = int(($xmax - $xmin) * $scale);
my $hgt = int(($ymax - $ymin) * $scale);
printf qq{w=%d,h=%d,x=%.0f,y=%.0f,f="%s"\n}, $wid, $hgt,
   (0.75*$grid_x - $xmin) * $scale, (0.25*$grid_y - $ymin) * $scale, $bgfile;

my $surface = Cairo::ImageSurface->create('rgb24', $wid, $hgt);
my $ctx = Cairo::Context->create($surface);
$ctx->scale($scale, $scale);
$ctx->translate(-$xmin, -$ymin);
$ctx->set_source_surface($bkg, -$half_wid, -$half_hgt);
$ctx->paint();

$ctx->set_line_width(0.75);
$ctx->set_source_rgb(0, 0, 0);
$ctx->move_to(xform(-$w-1, 1));  $ctx->line_to(xform($w, 1));
$ctx->move_to(xform(-$w-1, 2));  $ctx->line_to(xform($w, 2));
$ctx->move_to(xform(-$w-1, 3));  $ctx->line_to(xform($w, 3));
$ctx->move_to(xform(-2, 4));     $ctx->line_to(xform(1, 4));
if ($w == 2) {
   $ctx->move_to(xform(-3, 1));  $ctx->line_to(xform(-3, 3));
   $ctx->move_to(xform(2, 1));   $ctx->line_to(xform(2, 3));
}
for my $x (-2 .. 1) {
   $ctx->move_to(xform($x, 1));  $ctx->line_to(xform($x, 4));
}
$ctx->stroke();

$surface->write_to_png($tempfile) or die;
system("pngcrush -new -q $tempfile $bgfile") == 0 or die;
unlink $tempfile;

sub xform {
   my ($x, $y) = @_;
   $y -= 0.25;
   return ($grid_x * ($x + $y), $grid_y * ($x - $y + 1));
}

