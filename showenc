#!/usr/bin/env perl
# Build boss strike battles pages
use strict;
use warnings;
use lib 'lib';
use BN;
use Cairo;
use POSIX qw( ceil floor );

die "Usage: $0 strike_id | encounter_id\n" unless @ARGV == 1;

my %maps = (
   'BattleMapCave.png'  => 'cave',
   'BattleMapSnow.png'  => 'snow',
);

if (my $strike = BN::BossStrike->get($ARGV[0])) {
   write_strike($strike);
}
elsif (my $enc = BN::Encounter->get($ARGV[0])) {
   write_encounter($enc, $ARGV[0]);
}
else {
   die "Encounter $ARGV[0] not found\n";
}

sub write_encounter {
   my ($enc, $id) = @_;
   open my $F, '>', $id or die "Can't write $id: $!\n";
   show_encounter($F, $enc);
   close $F;
}

sub write_strike {
   my ($strike) = @_;

   my %levels;
   foreach my $encounter (@{$strike->{globalEventEncounters}}) {
      add_encounter($encounter, \%levels, 0);
   }
   my $tnum;
   foreach my $tier ($strike->tiers()) {
      ++$tnum;
      foreach my $encounter (@{$tier->{encounters}}) {
         add_encounter($encounter, \%levels, $tnum);
      }
   }

   my %level_tiers;
   foreach my $levels (sort keys %levels) {
      my $tiers = $levels{$levels} or next;
      my @tiers = sort {$a <=> $b} keys %$tiers;
      while (@tiers) {
         my $tnum = shift @tiers;
         my $eids = $tiers->{$tnum} or next;
         my $hinum = $tnum;
         if ($tnum) {
            my $eidstr = join ',', sort keys %$eids;
            while (@tiers) {
               my $nextnum = $tiers[0];
               my $nextids = $tiers->{$nextnum} or last;
               my $nextstr = join ',', sort keys %$nextids;
               last unless $nextstr eq $eidstr;
               $hinum = $nextnum;
               shift @tiers;
            }
         }
         else {
            $tnum = 1;
            $hinum = 10;
         }
         if ($tnum == $hinum) { $level_tiers{$levels}{$tnum} = $eids }
         else { $level_tiers{$levels}{"$tnum-$hinum"} = $eids }
      }
   }

   foreach my $levels (sort keys %level_tiers) {
      my $tiers = $level_tiers{$levels} or next;
      foreach my $tnum (sort keys %$tiers) {
         my $file = "Level_${levels}_tier_${tnum}_battles";
         print "$file\n";
         open my $F, '>', $file or die "Can't write $file: $!";
         my $eids = $tiers->{$tnum} or next;
         my $enum;
         foreach my $eid (sort keys %$eids) {
            show_encounter($F, BN::Encounter->get($eid), 'Battle ' . ++$enum);
         }
         print $F "[[Category:Boss Strike Battles]]\n";
      }
   }

   foreach my $levels (sort keys %level_tiers) {
      my $tiers = $level_tiers{$levels} or next;
      my @links;
      foreach my $tnum (sort keys %$tiers) {
         push @links, "[[/Level $levels tier $tnum battles|tier $tnum]]";
      }
      print "*Level $levels ", join(', ', @links), "\n";
   }
}

sub add_encounter {
   my ($enc, $levels, $tier) = @_;
   my $id = $enc->{encounterId} or return;
   my $max_level = BN::Level->max();
   my $min = $enc->{minLevel} || 1;
   my $max = $enc->{maxLevel} || $max_level;
   $max = $max_level if $max > $max_level;
   $levels->{"$min-$max"}{$tier}{$id} = 1;
}

sub show_encounter {
   my ($F, $enc, $name) = @_;
   my $waves = $enc->waves() or return;
   if ($enc->name()) {
      $name .= ': ' if $name;
      $name .= $enc->name();
   }
   else {
      $name ||= 'Battle';
   }
   print $F "==$name==\n";
   print $F "<tabber>\n";

   my $map = $maps{$enc->map() || ''};

   for my $wave (1 .. @$waves) {
      my @units = sort { $a->{grid} <=> $b->{grid} }
         grep { $_->{grid} } $enc->unit_positions($wave) or next;

      print $F "|-|\n" if $wave > 1;
      print $F "Wave $wave=\n{{BattleMap\n";
      print $F "| map = $map\n" if $map;

      foreach my $u (@units) {
         my $unit = $u->{unit};
         my $tag = get_icon($unit);
         my $link = $unit->wiki_page();
         my $title = $unit->shortname();
         if (my $level = $unit->level()) {
            $title .= " (Level $level)";
         }
         my $grid = $u->{grid};
         print $F "| enemy$grid = $tag\n",
            "| link$grid = $link\n",
            "| title$grid = $title\n";
      }

      print $F "}}\n";
   }

   print $F "</tabber>\n{{Clear}}\n";

   if (my $eff = $enc->environment()) {
      my $text = $eff->effect();
      print $F "Environmental damage: $text\n" if $text;
   }

   my $wnum;
   foreach my $wave (@$waves) {
      $wnum++;
      next unless $wave;
      my %links;
      foreach my $id (@$wave) {
         my $unit = BN::Unit->get($id, 1) or next;
         $links{$unit->shortname()}{$unit->shortlink()}++;
      }
      my @links;
      foreach my $nm (sort keys %links) {
         my $lks = $links{$nm} or next;
         foreach my $link (sort keys %$lks) {
            my $num = $lks->{$link} || 1;
            $link .= ' x ' . $num if $num > 1;
            push @links, $link;
         }
      }
      my $links = join ', ', @links;
      print $F "* Wave $wnum: $links\n" if $links;
   }
}

my %icon_tags;
sub get_icon {
   my ($unit) = @_;
   my $anim = BN::Animation->get($unit->animation()) or return;
   my $tag = $anim->tag();
   $tag =~ s/_idle$//i;
   my $img = ucfirst($tag);
   $tag =~ s/_fr(?:ont)?$//i;

   if (!%icon_tags) {
      $icon_tags{''} = '';
      if (open my $MAP, '<', 'iconmap') {
         local $_;
         while (<$MAP>) {
            $icon_tags{$1} = 1 if /^front\["(.*?)"\]=/;
         }
      }
   }
   return $tag if $icon_tags{$tag};
   $icon_tags{$tag} = 1;

   my ($left,$right,$top,$bottom) = $anim->box(0);
   my $x = -floor($left);
   my $y = -floor($top);
   my $wid = ceil($right) + $x;
   my $hgt = ceil($bottom) + $y;
   my $fmt = 'argb32';
   my $stride = Cairo::Format::stride_for_width($fmt, $wid);
   my $data = "\0" x ($stride * $hgt);

   my $surface = Cairo::ImageSurface->create_for_data(
      $data, $fmt, $wid, $hgt, $stride);
   my $ctx = Cairo::Context->create($surface);
   $ctx->translate($x, $y);
   $anim->render($ctx, 0);

   if (($left,$right,$top,$bottom) = crop(\$data, $wid, $hgt, $stride)) {
      $x -= $left;
      $y -= $top;
      $wid -= $left + $right;
      $hgt -= $top + $bottom;
      die 'no image' if $wid <= 0 || $hgt <= 0;
      my $old_stride = $stride;
      $stride = Cairo::Format::stride_for_width($fmt, $wid);
      my $off = 4*$left + $top*$old_stride;
      $data = join '',
         map { substr($data, $off + $old_stride*$_, $stride) } 0 .. $hgt-1;
      $surface = Cairo::ImageSurface->create_for_data(
         $data, $fmt, $wid, $hgt, $stride);
   }

   my $tmp = "$img-tmp.png";
   $img .= '.png';
   $surface->write_to_png($tmp) or die;
   system("pngcrush -new -q -brute $tmp $img") == 0 or die;
   unlink $tmp;

   my $line = qq(front["$tag"]={x=$x,y=$y,w=$wid,f="$img"}\n);
   print $line;
   if (open my $MAP, '>>', 'iconmap') {
      print $MAP $line;
      close $MAP;
   }
   return $tag;
}

sub crop {
   my ($data, $wid, $hgt, $stride) = @_;
   my $left = 0;
   my $right = $wid - 1;
   my $top = 0;
   my $bottom = $hgt - 1;

   while ($left < $right && blankcol($data, $left, $top, $bottom, $stride)) {
      $left++;
   }
   while ($left < $right && blankcol($data, $right, $top, $bottom, $stride)) {
      $right--;
   }
   while ($top < $bottom && blankrow($data, $top, $left, $right, $stride)) {
      $top++;
   }
   while ($top < $bottom && blankrow($data, $bottom, $left, $right, $stride)) {
      $bottom--;
   }

   $right = $wid - 1 - $right;
   $bottom = $hgt - 1 - $bottom;
   return unless $left || $right || $top || $bottom;
   return ($left, $right, $top, $bottom);
}

sub blankcol {
   my ($data, $x, $top, $bottom, $stride) = @_;
   my $i = 4*$x + $top*$stride;
   for my $y ($top .. $bottom) {
      my $alpha = unpack('L', substr($$data, $i, 4)) >> 24;
      return if $alpha > 8;
      $i += $stride;
   }
   return 1;
}

sub blankrow {
   my ($data, $y, $left, $right, $stride) = @_;
   my $i = 4*$left + $y*$stride;
   for my $x ($left .. $right) {
      my $alpha = unpack('L', substr($$data, $i, 4)) >> 24;
      return if $alpha > 8;
      $i += 4;
   }
   return 1;
}

