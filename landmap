use strict;
use warnings;
use lib 'lib';
use BN;
use Cairo;
use Getopt::Std;
use POSIX qw( ceil floor );

my %opts;
getopts('lrt', \%opts) or die 'bad opts';
my $LABELS = $opts{l};
my $RAGGED = $opts{r};
my $TILENUMS = $opts{t};

my $mapname = $ARGV[0];
unless ($mapname) {
   my $landlist = BN::File->json('LandList.json');
   if (my $list = $landlist->{landList}) {
      print 'Maps: ', join(', ', sort @$list), "\n";
   }
   die 'no map selected';
}

my $map = BN::File->json($mapname . '.json');
my $tilefile = $map->{tileLayoutFile} or die;
my $tileset = $map->{tileSet} or die;
$tileset =~ s/\.pvr$//;
my $tiles = BN::File->json($tilefile);
$tiles = $tiles->{map} or die;
my $layer = $tiles->{layers}[0] or die;
my $data = $layer->{data} or die;
my $wid = $layer->{width} or die;
my $hgt = $layer->{height} or die;

my $xmin =  10000;
my $xmax = -10000;
my $ymin =  10000;
my $ymax = -10000;
my $i = 0;
for my $y (0 .. $hgt-1) {
   for my $x (0 .. $wid-1) {
      next unless $data->[$i++];
      my $X = ($x - $y) * 60 + 59;
      my $Y = ($x + $y) * 30 + 29;
      $xmin = $X if $xmin > $X;
      $xmax = $X if $xmax < $X;
      $ymin = $Y if $ymin > $Y;
      $ymax = $Y if $ymax < $Y;
   }
}

if ($RAGGED) {
   $xmin -= 60;
   $xmax += 60;
   $ymin -= 30;
   $ymax += 30;
}

my $buildings = $map->{buildings};
if ($buildings) {
   my %roads;
   my $xoff = 30 * ($wid - $hgt) + 60;
   my $yoff = 15 * ($wid + $hgt);
   foreach my $info (@$buildings) {
      $info->{YY} = 0;
      my $type = $info->{type} or next;
      $info->{bld} = my $bld = BN::Building->get($type) or next;
      $info->{X} = $xoff - 20 * ($info->{x} - $info->{y});
      $info->{Y} = $yoff - 10 * ($info->{x} + $info->{y});
      $info->{YY} = $info->{Y};
      $info->{YY} += 15 if $type =~ /^deco_egg_/; # kludge
      $info->{YY} -= 15 if $type =~ /^deco_dirtroad_/;
      if (my $road = $bld->{BNSmartRoad}) {
         $roads{"$info->{x},$info->{y}"} = $road->{baseAnimationName};
      }
   }
   foreach my $info (@$buildings) {
      my $bld = $info->{bld} or next;
      my $animname = $bld->animation('Default') or next;
      if (my $road = $bld->{BNSmartRoad}) {
         $animname = smart_road($info, $road, \%roads) || $animname;
      }
      $info->{anim} = my $anim = eval { BN::Animation->get($animname) };
      die "Can't load $animname: $@" if $@;
      if ($RAGGED && $anim) {
         my @box = $anim->box(0);
         my $lft = floor($info->{X} + $box[0]);
         my $rgt =  ceil($info->{X} + $box[1]);
         my $top = floor($info->{Y} + $box[2]);
         my $btm =  ceil($info->{Y} + $box[3]);
         $xmin = $lft if $xmin > $lft;
         $xmax = $rgt if $xmax < $rgt;
         $ymin = $top if $ymin > $top;
         $ymax = $btm if $ymax < $btm;
      }
   }
}

my $im_type = $RAGGED ? 'argb32' : 'rgb24';
my $im_wid = $xmax - $xmin;
my $im_hgt = $ymax - $ymin;
my $surface = Cairo::ImageSurface->create($im_type, $im_wid, $im_hgt);
my $ctx = Cairo::Context->create($surface);

my ($tileimg, $tilesetfile, $tilestatus);
foreach my $dir ('../bg/', 'bg/', '') {
   $tilesetfile = $dir . $tileset . '_split.png';
   $tileimg = Cairo::ImageSurface->create_from_png($tilesetfile) or die;
   $tilestatus = $tileimg->status();
   last if $tilestatus eq 'success';
}
die "Error: create_from_png('$tilesetfile'): $tilestatus\n"
   unless $tilestatus eq 'success';

$i = 0;
for my $y (0 .. $hgt-1) {
   for my $x (0 .. $wid-1) {
      my $tile = $data->[$i++] or next;
      $tile--;
      my $tx = (($tile & 7) << 7) + 5;
      my $ty = (($tile >> 3) << 6) + 3;
      my $X = ($x - $y) * 60 - $xmin;
      my $Y = ($x + $y) * 30 - $ymin;
      $ctx->set_source_surface($tileimg, $X - $tx, $Y - $ty);
      $ctx->rectangle($X-1, $Y-1, 122, 62);
      $ctx->fill();
      if ($TILENUMS) {
         $ctx->set_source_rgb(1, 1, 1);
         $ctx->move_to($X+60, $Y+30);
         $ctx->show_text($tile);
      }
   }
}

if ($buildings) {
   my %links;
   foreach my $info (sort { $a->{YY} <=> $b->{YY} } @$buildings) {
      my $bld = $info->{bld} or next;
      if ($LABELS && (my $link = $bld->map_link())) {
         my $map = BN::Map->get($link);
         $links{"$info->{x},$info->{y}"} = {
            X    => $info->{X},
            Y    => $info->{Y},
            name => $map->name(),
         } if $map;
      }
      my $anim = $info->{anim} or next;
      $ctx->save();
      $ctx->translate($info->{X} - $xmin, $info->{Y} - $ymin);
      $ctx->scale(-1, 1) if $info->{flip};
      $anim->render($ctx, 0);
      $ctx->restore();
   }
   if (%links) {
      $ctx->set_font_size(32);
      foreach my $link (sort { $a->{Y} <=> $b->{Y} } values %links) {
         my $ext = $ctx->text_extents($link->{name});
         $ctx->move_to(
            $link->{X} - $ext->{width}/2 - $ext->{x_bearing} - $xmin,
            $link->{Y} - $ext->{y_bearing} - $ymin);
         $ctx->text_path($link->{name});
         $ctx->set_source_rgb(0, 0, 0);
         $ctx->set_line_width(4);
         $ctx->stroke_preserve();
         $ctx->set_source_rgb(1, 1, 1);
         $ctx->fill();
      }
   }
}

$surface->write_to_png($mapname . '.png');

sub smart_road {
   my ($info, $road, $roads) = @_;
   my $x = $info->{x};
   my $y = $info->{y};
   my $wid = $road->{width} or return;
   my $base = $road->{baseAnimationName} or return;
   $info->{flip} = 0;
   my $anim = $base . '_';
   $anim .= ($roads->{($x+$wid).','.($y)}||'') eq $base ? 'x' : 'o';
   $anim .= ($roads->{($x).','.($y+$wid)}||'') eq $base ? 'x' : 'o';
   $anim .= ($roads->{($x-$wid).','.($y)}||'') eq $base ? 'x' : 'o';
   $anim .= ($roads->{($x).','.($y-$wid)}||'') eq $base ? 'x' : 'o';
   return $anim;
}

