use strict;
use warnings;
use lib 'lib';
use Getopt::Std qw( getopts );
use MW::UserAgent;

my %opts;
getopts('fs:', \%opts) or die;
my $FORCE = $opts{f};
my $summary = $opts{s} || 'Update';
die "usage: $0 files\n" unless @ARGV;

my $ua = MW::UserAgent->new('http://battlenations.wikia.com/api.php');
$ua->login();

foreach my $file (@ARGV) {
   my $old_file = $file;
   $file =~ s/\.old$//i or $old_file .= '.old';

   my ($text, $name) = read_file($file) or next;
   if (!$FORCE) {
      my ($old_text) = read_file($old_file) or next;
      write_file('temp.old', $summary, "\n", $old_text);
      write_file('temp', $summary, "\n", $text);
      system 'diff -u temp.old temp > temp.diff';
   }

   print "\n>>> $name <<<\n";
   sleep 1;
   my $info = eval { $ua->get_info($name, 'text', 'edit') };
   warn $@ if $@;
   next unless $info && $info->{_text} && $info->{edittoken};
   write_file('temp.old', $summary, "\n", $info->{_text}, "\n");

   my $new_text;
   if ($FORCE) {
      my @wiki_parts = split /^(=+.*?=+)$/m, $info->{_text};
      my %index;
      for (my $i = 1; $i < $#wiki_parts; $i += 2) {
         $index{$wiki_parts[$i]} = $i;
      }

      my @file_parts = split /^(=+.*?=+)$/m, $text;
      for (my $i = 1; $i < $#file_parts; $i += 2) {
         next if $file_parts[$i] =~ /Overview/;
         if (my $j = $index{$file_parts[$i]}) {
            $wiki_parts[$j+1] = $file_parts[$i+1];
         }
         else {
            push @wiki_parts, $file_parts[$i], $file_parts[$i+1];
         }
      }

      if (my ($profile) = $file_parts[0] =~ /^\| image *=[^\n]*\n(.*?\n}})/ms) {
         $wiki_parts[0] =~ s/^(\|\s*image\s*=[^\n]*\n).*?\n}}/$1$profile/ms;
      }

      $new_text = join '', @wiki_parts;
      write_file('temp', $summary, "\n", $new_text);
   }
   else {
      write_file('temp', $summary, "\n", $info->{_text});
      system 'patch -p0 -N -l < temp.diff';
      next if unlink 'temp.rej';
      ($new_text) = read_file('temp') or die;
   }

   if (minspace($new_text) eq minspace($info->{_text})) {
      unlink $old_file;
      next;
   }

   my $line;
   while (1) {
      system 'diff -bu temp.old temp';
      print "--- $name --- $summary\n";
      print "ok? ";
      $line = <STDIN>;
      last unless $line && $line =~ /e/i;
      system 'vi temp';
      ($new_text, $summary) = read_file('temp') or die;
   }
   last unless defined $line;
   if ($line =~ /y/i) {
      $ua->edit($name, $new_text, $summary, $info->{edittoken}, 'nocreate');
      unlink $old_file;
      print "Edited\n";
   }
   unlink $old_file if $line =~ /n/i;
   last if $line =~ /q/i;
}

unlink 'temp', 'temp.old', 'temp.diff', 'temp.orig';

sub minspace {
   my ($str) = @_;
   $str =~ s/[ \t]+/ /g;
   return $str;
}

sub read_file {
   my ($file) = @_;
   open my $F, '<:encoding(utf8)', $file or die "Can't read $file: $!\n";
   my $name = <$F>;
   return unless defined $name;
   chomp $name;
   local $/ = undef;
   my $text = <$F>;
   close $F;
   $text =~ s/\n__DUMP__\n.*//s;
   return ($text, $name);
}

sub write_file {
   my ($file, @text) = @_;
   open my $F, '>:encoding(utf8)', $file or die "Can't write $file: $!\n";
   print $F @text or die "print: $!";
   close $F or die "close: $!";
}

