#!/usr/bin/env perl
# Experimental tool to work out mission sequences.
# Lines starting with < are prerequisites; > are followups.
use strict;
use warnings;
use lib 'lib';
use BN;

my %oldintro;
$oldintro{$_} = 1 foreach qw(
   p01_BUILD_070_BuildBootCamp
   p01_BUILD_100_TeachCamera
   p01_BUILD_130_BuildStoneQuarry
   p01_BUILD_140_BuildResourceDepot
   p01_FARMS_010_BuildFarm1
   p01_UPBLD_010_BuildingUpgradeLvl1
   p01_ZOEY1_010_BuildHovel
);

binmode STDOUT, ':utf8';

open my $F, '<', 'wiki/Missions' or die;
my %headings;
while (<$F>) {
   if (my ($head) = /^=+(.*?)=+\s*$/) {
      $head =~ s{</?u>}{}g;
      $head =~ s/^\s+//;
      $head =~ s/\s+$//;
      $headings{$head}++;
   }
}

my (%names, @groups, %blocks);

foreach my $mis (BN::Mission->all()) {
   my $level = $mis->level() // 0;
   my @tags;
   push @tags, 'Old' if $oldintro{$mis->tag()};
   push @tags, 'Hidden' if $mis->hidden();
   push @tags, 'New' unless $headings{$mis->name()};
   push @tags, $mis->tag();
   $names{$mis->tag()} = sprintf '%2d %s (%s)', $level, $mis->name(), "@tags";
   push @{$groups[($level+9)/10]}, $mis;
}

sort_group($_) foreach @groups;

sub sort_group {
   my ($group) = @_;
   foreach my $mis (@$group) {
      $blocks{$mis->tag()} = { before=>{}, after=>{}, ids=>[$mis->tag()] };
   }
   foreach my $mis (@$group) {
      my $blk = $blocks{$mis->tag()} or die;
      foreach my $id (prereq_ids($mis)) {
         my $refblk = $blocks{$id} or next;
         $blk->{before}{$id} = 1;
         $refblk->{after}{$mis->tag()} = 1;
      }
   }

   my $changed;
   do {
      $changed = 0;
      foreach my $id (sort { $names{$a} cmp $names{$b} } keys %blocks) {
         my $blk = $blocks{$id} or next;
         GROW: while (keys(%{$blk->{after}}) == 1) {
            my ($nextid) = keys(%{$blk->{after}});
            my $nextblk = $blocks{$nextid} or die;
            die unless $nextblk->{before}{$id};
            my $prereqs = prereqs($id);
            foreach my $revid (keys %{$nextblk->{before}}) {
               last GROW unless $prereqs->{$revid};
            }
            foreach my $revid (keys %{$nextblk->{before}}) {
               my $revblk = $blocks{$revid} or die;
               delete $revblk->{after}{$nextid};
            }
            push @{$blk->{ids}}, @{$nextblk->{ids}};
            $blk->{after} = $nextblk->{after};
            foreach my $refid (keys %{$blk->{after}}) {
               my $refblk = $blocks{$refid} or die;
               delete $refblk->{before}{$nextid} or die;
               $refblk->{before}{$id} = 1;
            }
            delete $blocks{$nextid};
            $changed = 1;
         }
      }
   } while $changed;

   print_block($_) foreach sort { $names{$a} cmp $names{$b} } keys %blocks;

   print "-" x 42, "\n\n";
   %blocks = ();
}

sub print_block {
   my ($id) = @_;
   my $block = $blocks{$id} or die;
   return if $block->{mark};
   $block->{mark} = 1;
   print_block($_) foreach sort keys %{$block->{before}};
   print "<$_\n" foreach
      sort map { $names{$blocks{$_}{ids}[-1]} } keys %{$block->{before}};
   print_mission($_) foreach @{$block->{ids}};
   print ">$_\n" foreach sort map { $names{$_} } keys %{$block->{after}};
   print "\n";
}

my %already_have;

sub print_mission {
   my ($id) = @_;
   my $mis = BN::Mission->get($id) or die;
   print "|$names{$id}\n";

   foreach my $obj ($mis->objectives()) {
      my $t = $obj->{_t} or next;
      my $txt = BN::Prereqs->describe($obj) or next;
      if ($txt =~ /^Build/) {
         next if $already_have{$txt}++;
      }
      print "    :* $txt\n";
   }

   if (my $rewards = $mis->rewards()) {
      print "    :Rewards: $rewards\n";
   }

   my @unlocks;
   foreach my $obj ($mis->unlocks_buildings(), $mis->unlocks_units()) {
      push @unlocks, $obj->wikilink();
   }
   print "    :Unlocks: ", join(', ', @unlocks), "\n" if @unlocks;
}

my %prereq_cache;

sub prereqs {
   my ($id) = @_;
   return $prereq_cache{$id} if $prereq_cache{$id};
   my $mis = BN::Mission->get($id) or die;
   my %prereqs;
   $prereqs{$id} = 1;
   $prereq_cache{$id} = \%prereqs;
   foreach my $preid (prereq_ids($mis)) {
      my $prereqs = prereqs($preid);
      $prereqs{$_} = 1 foreach keys %$prereqs;
   }
   return \%prereqs;
}

sub prereq_ids {
   my ($mis) = @_;
   my $level = $mis->level() // 0;
   my @ids;
   foreach my $prereq ($mis->prereqs()) {
      next if $prereq->{inverse};
      my $t = $prereq->{_t} or next;
      my $ids;
      if ($t eq 'CompleteMissionPrereqConfig') {
         my $id = $prereq->{missionId} or next;
         push @ids, $id;
      }
      elsif ($t eq 'CompleteAnyMissionPrereqConfig') {
         $ids = $prereq->{missionIds} or next;
         foreach my $id (@$ids) {
            my $m = BN::Mission->get($id) or next;
            next if ($m->level()//0) > $level;
            push @ids, $id;
         }
      }
   }
   return @ids;
}

