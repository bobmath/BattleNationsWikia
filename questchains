#!/usr/bin/env perl
# Experimental tool to work out mission sequences.
# Lines starting with < are prerequisites; > are followups.
use strict;
use warnings;
use lib 'lib';
use BN;

my %old_missions;
$old_missions{$_} = 1 foreach qw(
   p01_BK2RR_010_RaidersBattle2
   p01_BK2RR_020_BuildPillbox
   p01_BK2RR_030_TrainGrenadier
   p01_BK2RR_040_ReturnRecoilRidge
   p01_BK2RR_050_BattleRecoilRidge
   p01_BK2RR_051_HeroesReturn1
   p01_BK2RR_052_HeroesReturn2
   p01_BK2RR_053_HeroesReturn3
   p01_BK2RR_060_HelpAdventurer
   p01_BK2RR_061_SandboxOpen
   p01_BUILD_040_CollectSupplyDrops
   p01_BUILD_070_BuildBootCamp
   p01_BUILD_090_BuildShelter
   p01_BUILD_100_TeachCamera
   p01_BUILD_110_RaiderEncounters
   p01_BUILD_130_BuildStoneQuarry
   p01_BUILD_140_BuildResourceDepot
   p01_BUILD_150_CollectTaxes
   p01_BUILD_280_BuildBunker2
   p01_BUILD_510_BuildHospital
   p01_FARMS_010_BuildFarm1
   p01_HOSP_010_QueueSomething
   p01_INTRO_040_BuildShelter
   p01_NEWINTRO_140_BuildHospital
   p01_NEWINTRO_143_StartAdvHospital
   p01_RTANK_010_RaiderScouts
   p01_RTANK_070_MakeTools
   p01_UPBLD_010_BuildingUpgradeLvl1
   p01_UPBLD_010_BuildingUpgradeLvl1_LateGame
   p01_UPBLD_020_BuildingUpgradeLvl2
   p01_UPBLD_020_BuildingUpgradeLvl2_LateGame
   p01_ZOEY1_010_BuildHovel
);

binmode STDOUT, ':utf8';

my @groups;
foreach my $mis (BN::Mission->all()) {
   next if $old_missions{$mis->tag()};
   my $level = $mis->level() or next;
   my $grp = int(($mis->level() - 1) / 10);
   push @{$groups[$grp]}, $mis;
}
my $curr_page = 0;
foreach my $group (@groups) {
   sort_group($group);
   ++$curr_page;
}

my (%blocks, %followups);
sub sort_group {
   my ($group) = @_;
   @$group = sort { $a->level() <=> $b->level() } @$group;
   foreach my $mis (@$group) {
      $blocks{$mis->tag()} = { before=>{}, after=>{}, missions=>[$mis] };
   }
   foreach my $id (sort keys %blocks) {
      my $block = $blocks{$id} or die;
      my $mis = $block->{missions}[0];
      foreach my $prereq (prereqs($mis)) {
         my $refblk = $blocks{$prereq} or next;
         $refblk->{after}{$mis->tag()} = 1;
         $block->{before}{$prereq} = 1;
      }
   }
   coalesce($_) foreach sort keys %blocks;
   print_block($_) foreach sort block_compare keys %blocks;
   %blocks = ();
   %followups = ();
   print "-" x 42, "\n\n";
}

sub block_compare {
   my $amis = BN::Mission->get($a) or die;
   my $bmis = BN::Mission->get($b) or die;
   $amis->level() <=> $bmis->level() || $amis->name() cmp $bmis->name();
}

sub coalesce {
   my ($id) = @_;
   my $block = $blocks{$id} or return;

   while (1) {
      my $nextid;
      my $nextlev = 999;
      foreach my $checkid (keys %{$block->{after}}) {
         my $checkblk = $blocks{$checkid} or die;
         my $checkmis = $checkblk->{missions}[0];
         my $checklev = $checkmis->level();
         if ($checklev < $nextlev) {
            $nextlev = $checklev;
            $nextid = $checkid;
         }
         elsif ($checklev == $nextlev) {
            $nextid = undef;
         }
      }
      return unless $nextid;
      my $nextblk = $blocks{$nextid} or die;
      return if keys(%{$nextblk->{before}}) > 1;
      die unless $nextblk->{before}{$id};

      foreach my $refid (sort keys %{$block->{after}}) {
         my $refblk = $blocks{$refid} or die;
         delete $refblk->{before}{$id} or die;
      }

      foreach my $refid (sort keys %{$nextblk->{after}}) {
         my $refblk = $blocks{$refid} or die;
         delete $refblk->{before}{$nextid} or die;
         $refblk->{before}{$id} = 1;
      }

      my $lastmis = $block->{missions}[-1];
      delete $block->{after}{$nextid};
      $followups{$lastmis->tag()} = $block->{after} if %{$block->{after}};
      push @{$block->{missions}}, @{$nextblk->{missions}};
      $block->{after} = $nextblk->{after};
      delete $blocks{$nextid} or die;
   }
}

sub print_block {
   my ($id) = @_;
   my $block = $blocks{$id} or die;
   return if $block->{mark};
   $block->{mark} = 1;
   print_block($_) foreach sort block_compare keys %{$block->{before}};
   print_mission($_) foreach @{$block->{missions}};
   print_followups($block->{after});
   print "\n";
}

my %already_have;
sub print_mission {
   my ($mis) = @_;
   print "===", name_hidden($mis), "===\n";
   my @prereqs;
   my $level = $mis->level();
   push @prereqs, "[[Levels#$level|Level $level]]";
   foreach my $prereq (prereqs($mis)) {
      push @prereqs, mission_link(BN::Mission->get($prereq));
   }
   print "Prereqs: ", join(', ', @prereqs), "\n" if @prereqs;

   foreach my $obj ($mis->objectives()) {
      my $t = $obj->{_t} or next;
      my $txt = describe($obj) or next;
      if ($txt =~ /^Build/) {
         next if $already_have{$txt}++;
      }
      print "* $txt\n";
   }

   if (my $rewards = $mis->rewards()) {
      print "Rewards: $rewards<br>\n";
   }

   my @unlocks;
   foreach my $obj ($mis->unlocks_buildings(), $mis->unlocks_units()) {
      push @unlocks, $obj->wikilink();
   }
   print "Unlocks: ", join(', ', @unlocks), "<br>\n" if @unlocks;

   print_followups($followups{$mis->tag()});
}

sub print_followups {
   my ($followups) = @_;
   return unless $followups && %$followups;
   my @followup = map { mission_link(BN::Mission->get($_)) }
      sort block_compare keys %$followups;
   print "Followups: ", join(', ', @followup), "\n" if @followup;
}

sub mission_link {
   my ($mis) = @_;
   my $page = '';
   my $num = int(($mis->level() - 1) / 10);
   if ($num != $curr_page) {
      my $lo = $num * 10 + 1;
      my $hi = $lo + 9;
      $hi = 65 if $hi > 65;
      $page = "Missions $lo-$hi";
   }
   my $name = name_hidden($mis);
   return "[[$page#$name|$name]]";
}

sub name_hidden {
   my ($mis) = @_;
   my $name = $mis->name();
   $name .= ' (Hidden)' if $mis->hidden() && $name !~ /hidden/i;
   return $name;
}

my (%full_prereqs, %min_prereqs);
sub prereqs {
   my ($mis) = @_;
   my $misid = $mis->tag();
   return @{$min_prereqs{$misid}} if $min_prereqs{$misid};
   my %prereqs;
   $prereqs{$misid} = 1;
   $full_prereqs{$misid} = \%prereqs;
   my @filtered;
   $min_prereqs{$misid} = \@filtered;

   my @prereqs;
   foreach my $prereq ($mis->prereqs(), $mis->completion()->prereqs()) {
      my $t = $prereq->{_t} or next;
      my $preid;
      if ($t eq 'CompleteMissionPrereqConfig') {
         $preid = $prereq->{missionId};
         next if $old_missions{$preid};
      }
      elsif ($t eq 'CompleteAnyMissionPrereqConfig'
         || $t eq 'ActiveMissionPrereqConfig')
      {
         my $ids = $prereq->{missionIds} or next;
         foreach my $testid (@$ids) {
            next if $old_missions{$testid};
            die "too many ids for $misid" if $preid;
            $preid = $testid;
         }
      }
      next unless $preid;
      my $m = BN::Mission->get($preid) or next;
      prereqs($m);
      my $p = $full_prereqs{$preid};
      while (my ($k,$v) = each %$p) {
         $prereqs{$k} = 1;
      }
      push @prereqs, { id=>$preid, full=>$p };
   }

   CHECK: foreach my $prereq (@prereqs) {
      my $preid = $prereq->{id};
      foreach my $other (@prereqs) {
         next if $other->{id} eq $preid;
         next CHECK if $other->{full}{$preid};
      }
      push @filtered, $preid;
   }

   return @filtered;
}

my %places = (
   AncientRuins1           => "[[Ancient Ruins]]",
   BOARS_RecoilRidge       => "[[Recoil Ridge]]",
   CrazyBladesBase         => "[[Blade's Base]]",
   FINAL_90_raiderFortress => "[[Warlord Gantas' Fortress]]",
   FINAL_raiderFortress    => "[[Warlord Gantas' Fortress]]",
   Marin                   => "[[Marin]]",
   MyLand                  => '[[Outpost]]',
   RFORT_90_raiderFortress => "[[Warlord Gantas' Fortress]]",
   SAVRR_RecoilRidge       => "[[Recoil Ridge]]",
   SarinBase               => "[[Sarin's Base]]",
   TronkBase               => "[[Tronk's Base]]",
   WORLD_MAP               => "[[World Map]]",
   WorldMap                => '[[World Map]]',
   boarLand                => "[[Boar Badlands]]",
   lightReconLand          => "[[Boar Badlands]]",
   npc_1                   => "[[Recoil Ridge]]",
   npc_2                   => "[[Recoil Ridge]]",
   raptorNest              => "[[Raptor Nest]]",
);

sub describe {
   my ($class, $prereq) = @_;
   if (my $text = BN::Text->fetch($prereq->{objectiveText})) {
      return "Text: $text";
   }
   my $t = $prereq->{_t} or return;
   if ($t eq 'LevelPrereqConfig') {
      my $level = $prereq->{level} or return;
      return "[[Levels#$level|Level $level]]";
   }
   elsif ($t eq 'HasCompositionPrereqConfig') {
      my $build = BN::Building->get($prereq->{compositionName}) or return;
      my $name = $build->wikilink() . count($prereq);
      return "Build $name";
   }
   elsif ($t eq 'CreateStructurePrereqConfig'
      || $t eq 'CollectStructurePrereqConfig')
   {
      my $bld = BN::Building->get($prereq->{structureType}) or return;
      my $name = $bld->wikilink() . count($prereq);
      return "Build $name";
   }
   elsif ($t eq 'HaveOneOfTheseStructuresPrereqConfig') {
      my $counts = $prereq->{buildingCounts} or return;
      my @bldgs;
      while (my ($id, $num) = each %$counts) {
         my $bld = BN::Building->get($id) or return;
         push @bldgs, $bld->wikilink() . count($num);
      }
      return unless @bldgs;
      return 'Build ' . join(' or ', sort @bldgs);
   }
   elsif ($t eq 'HaveAnyOfTheseStructuresPrereqConfig') {
      my $ids = $prereq->{buildings} or return;
      my @bldgs;
      foreach my $id (@$ids) {
         my $bldg = BN::Building->get($id) or return;
         push @bldgs, $bldg->wikilink() . count($prereq);
      }
      return unless @bldgs;
      return 'Build ' . join(' or ', @bldgs);
   }
   elsif ($t eq 'DefeatEncounterPrereqConfig'
      || $t eq 'DefeatEncounterSetPrereqConfig'
      || $t eq 'DefeatOccupationPrereqConfig'
      || $t eq 'FinishBattlePrereqConfig')
   {
      return 'Defeat encounter';
   }
   elsif ($t eq 'UnitsKilledPrereqConfig') {
      my $unit = BN::Unit->get($prereq->{unitId}) or return;
      my $name = $unit->wikilink() . count($prereq);
      return "Kill $name";
   }
   elsif ($t eq 'AttackNPCBuildingPrereqConfig') {
      my $bld = BN::Building->get($prereq->{compositionName}) or next;
      my $name = $bld->wikilink() . count($prereq);
      return "Attack $name";
   }
   elsif ($t eq 'CollectJobPrereqConfig') {
      my $job = BN::Job->get($prereq->{jobId}) or return;
      my $name = $job->name();
      if (my ($bldid) = $job->buildings()) {
         my $bld = BN::Building->get($bldid);
         my $bldname = $bld->name();
         $name = "[[$bldname#Goods|$name]]";
      }
      return "Make $name" . count($prereq);
   }
   elsif ($t eq 'TurnInPrereqConfig') {
      my $toll = BN->format_amount($prereq->{toll}) or return;
      return "Turn in $toll";
   }
   elsif ($t eq 'CollectProjectPrereqConfig') {
      my $unit = BN::Unit->get($prereq->{projectId}) or return;
      my $name = $unit->wikilink() . count($prereq);
      return "Train $name";
   }
   elsif ($t eq 'EnterOpponentLandPrereqConfig'
      || $t eq 'EnterStatePrereqConfig')
   {
      my $name = $prereq->{opponentId} || $prereq->{state};
      $name = $places{$name} || $name;
      return "Go to $name";
   }
   elsif ($t eq 'BuildingAssistedPrereqConfig') {
      my $bld = BN::Building->get($prereq->{compositionId}) or return;
      my $name = $bld->wikilink() . count($prereq);
      return "Assist $name";
   }
   elsif ($t eq 'MinPopulationCapacityPrereqConfig') {
      return "Population $prereq->{capacity}";
   }
   elsif ($t eq 'BuildingLevelPrereqConfig') {
      my $ids = $prereq->{compositionIds} or return;
      my $what = join ' or ', map { $_->wikilink() }
         map { BN::Building->get($_) } @$ids;
      return "Upgrade $what to level $prereq->{level}";
   }
   elsif ($t eq 'AddUnitGarrisonPrereqConfig') {
      return "Add $prereq->{count} units to garrisons";
   }
   elsif ($t eq 'DefensiveCoveragePrereqConfig') {
      return "Defend $prereq->{percent}% of buildings";
   }
   elsif ($t eq 'HaveLandExpansionsPrereqConfig') {
      return "Expand to $prereq->{count} spaces";
   }
   elsif ($t eq 'CompleteMissionPrereqConfig') {
      my $m = BN::Mission->get($prereq->{missionId}) or return;
      return 'Complete ' . $m->wikilink();
   }
   elsif ($t eq 'CompleteAnyMissionPrereqConfig'
      || $t eq 'ActiveMissionPrereqConfig')
   {
      my $ids = $prereq->{missionIds} or return;
      return 'Complete ' . join(' or ', map { $_->wikilink() }
         map { BN::Mission->get($_) } @$ids);
   }
   return "Other: $t";
}

sub count {
   my ($num) = @_;
   $num = $num->{count} if ref $num;
   return $num && $num > 1 ? " x $num" : '';
}

